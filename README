
#### Set up the environment

wget http://openrisc.debian.net/qemu-or1k-static.atomic -O /usr/bin/qemu-or1k-static
SHA1: e00a6d1b668c454d074057e7b174eb4d2b4f5d9f

sudo apt-get install binfmt-support sbuild
sudo cp modded-sbuild/qemu-or1k /var/lib/binfmts/
sudo /etc/init.d/binfmt-support restart
sudo update-binfmts --enable qemu-or1k

#### Create a new initramfs
# Debootstrap initramfs
sudo apt-get install debootstrap

sudo debootstrap --include=perl --no-check-gpg --foreign --arch or1k unstable initramfs http://openrisc.debian.net/
sudo cp /usr/bin/qemu-or1k-static initramfs/usr/bin

# It's important that you have configured binfmt-support at this point (see above).
# This should start to configure your new Debian system. No errors should be reported.
sudo chroot initramfs /usr/bin/qemu-or1k-static  -E PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin bin/bash /debootstrap/debootstrap --second-stage 

# Hacks:
#  - Redirect console to ttyS0 (inittab)
#  - Don't try to start swap (NOSWAP)
#  - Add repository (sources.list)
# You might want to update the snapshot timestamp in sources.list if you get errors about
# the repository having expired.
sudo cp hacks/inittab initramfs/etc/
echo "NOSWAP=yes" | sudo tee -a initramfs/etc/default/rcS
sudo cp builder/sources.list initramfs/etc/apt
echo "APT::Get::AllowUnauthenticated true;"| sudo tee -a initramfs/etc/apt/apt.conf.d/70debconf
# Set a root password
sudo chroot initramfs usr/bin/passwd

# Now you can either:
# - fire up an or1ksim instance with a kernel pointed to the initramfs directory (NFS root is a good thing)
# - sudo chroot initramfs /bin/bash

# You might want to do other things like resolv.conf and such.

# NOTE: A lot of packages has been packaged in a mean way and some packages are missing
# stuff they should contain. This is because of dependency loops that I needed to break.
# Since the loop is now broken it should only be a matter of recompiling those packages with
# all dependencies, but I'm more focused on upstreaming and fixing bootstrap ATM.

#### Create sbuild schroot for building packages

# NOTE: Please compare the snapshot version here with the one in builder/sources.list and make sure
# to use the newest one (probably builder/sources.list)
cat << _EOF_ > ~/.mk-sbuild.sources
deb [arch=all]       http://snapshot.debian.org/archive/debian/20140321T100510Z/     unstable       main
deb [arch=or1k]      http://openrisc.debian.net/                unstable       main
deb-src              http://snapshot.debian.org/archive/debian/20140321T100510Z/     unstable       main
_EOF_

sudo apt-get install ubuntu-dev-tools
cp modded-sbuild/mk-sbuild /usr/bin/
cp modded-sbuild/qemu-bootstrap /usr/sbin/

# First time you run this it will set up your groups and a few settings. Re-run it after the first time
# if this is the case.
mk-sbuild --arch or1k --debootstrap-include=perl --debootstrap-mirror=http://openrisc.debian.net/ unstable

# You can now enter the schroot via:
sudo schroot -c unstable-or1k -d /tmp

# or building packages with sbuild:
DEB_BUILD_OPTIONS=nocheck sbuild --no-arch-all -d unstable -c unstable-or1k --arch or1k ${PACKAGE}_${FULL_VERSION}

# or build.sh (given a binary package, find the latest source and build it):
builder/build.sh bash

#### To compile QEMU for or1k manually
# Make sure you have a deb-src line in your sources.list:
deb-src     http://http.debian.net/debian wheezy         main

# Compile qemu-or32:
git clone https://github.com/bluecmd/or1k-qemu.git

sudo apt-get build-dep qemu
./configure --target-list=or32-linux-user --static
make && sudo make install

sudo apt-get install binfmt-support
sudo ./scripts/qemu-binfmt-conf.sh


